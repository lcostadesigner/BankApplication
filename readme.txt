I’ve struggled so much from the beginning to the end of this project and after a lot of researches and videos, I can say that I did it and it is everything as I planned.

My big first struggle was to deal with the amount of data that we expected to include from the client and furthermore record this data into text files. Each time I work with numerous variables or classes there's some confusion, so I first attempt to do a pseudocode, which I find considerably more helpful than the UML, being totally legitimate. From that point onward, I had the option to complete my UML surer of what I realized that I would require for this undertaking.

Looking through additional information about it, talking with friends and watching videos, I chose to generally utilize public classes, to make it somewhat less complex and in light of the fact that that was something I was more used to. That turned out great as I could just get back to methods and classes without any issue. I do comprehend that, in our real life, for a bank application, for example, similar to this one I created, we would require more private classes to make it easier, friendlier and safer. 

On the Application, I tried to keep my Initial Menu clean and spotless, simply giving the two alternatives for the client to pick Employee or Customer and nothing else. I additionally made a point to request that the client attempt again on the off chance that whatever else separated from 1 or 2 is typed, so it would be helpful for the User.

Inside the Employee I added 5 different alternatives: to create a new account, to delete an account, to lodge, to withdraw and to show the customer list. My struggle on this part was to make the Application be able to go back to any option of the Menu, for example, the Employee requires a PIN to enter the menu I couldn't do that. I've researched on that but, as I wasn’t able to make it happen I got frustrated and I chose to simply to return to the BankMenu.java Class, which takes us back to the Initial Menu, we can see that when the running the Application. I think that worked out really well as it keeps the Application running until the client chooses to stop it or close the Application.

When making the text files, I thought that it was extremely confusing as that was something I have never truly had the opportunity to do any association between the code and a text file previously, yet I accept that with somewhat more class activities and I would have the option to do it without any issue. I discovered this method exceptionally straight forward, by utilizing the FileWriter to choose and open the record and the BufferedWriter to empower the PC to compose the new qualities on the report. I attempted to make the text on the files basic however coordinated, with all the data required. I really struggled with the names variables but however once I figured everything out it was everything fine.

In the Customer I added 2 different choices: Lodge and Withdraw. As I began with the Employee, I discovered it very easy to complete my Customer as the majority of the code was practically done. I just wish I had more opportunity to complete this menu appropriately with more information.

I first chose to make various different classes for all the transactions needed but, however the more I was working away at my program I had numerous issues in regards to associating the values of one class to another Class so in the end, I only chose to make the Transactions class that would incorporate the Withdraw, Lodge and Delete any methods. Although, the Delete strategy would only by Bank Employee and not by the Customer. I think that it saved me up some time and furthermore made the code a piece clearer than it was before when I was keeping them all separated.

The reason I created the ImplementData class was to be able to use an array to get every character of the first and last name of the person (typed by the employee) so I could get the first letter from each name and it`s alphabet position to generate the account number and pin. I always struggle when creating arrays which is why I somewhat enjoyed this exercise as it gave me the opportunity to practice this more as I know that I need to.
I created the ImplementData Class to have the option to utilize an array to get each character of the First and Last Name of the individual (Typed by the Bank Employee) so I could get the principal letter from each Name and its letters in the alphabet position to create the Account Number and PIN. 

Conclusion

It was very interesting and compensating to be able to create something that we really experience daily in our lives, yet never had the chance to see it from behind, how it really works. As I said before, my really big struggle while doing this project was to see how the files could be made however how to likewise to keep the values safe inside text files. Until now, in our programming classes we never had the chance to see it deeply as we would need to create a fully application similar to the one requested. Unfortunately, because of that, I was not able to really finish the application as wanted and needed to, but on the other hand I'm hundred percent happy with the work I've done so far as it made me to practice more and more, which is the thing that we all needed. It was a hard and incredible test to me and I could even say for all my student mates. I really appreciate this excursion of high points and low points which is figuring out how to program in Java that makes us to enjoy the most.
