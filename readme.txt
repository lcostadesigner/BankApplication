I`ve tried to do this project twice in two different ways.
The first alternative, ended up not being exactly as useful and prompt as I thought so after a couple of days working on it I decided to stop completely and start a new program from the beginning. I still kept some parts of my old program into this one, which can be shown upon request.

My first struggle was to manage the quantity of information that we needed to input from the user and also record this information into text files. Every time I work with many variables or classes there`s some confusion so I first try to do a pseudocode, which I find even more useful than the UML, being completely honest. After that, I was able to finish my UML more confident of what I knew that I would need for this project.

While I was searching more about it and talking with friends and watching videos online I decided to mostly use public classes, to make it a bit more simple and because that was something I was more used to. That worked out fine as I could simply call methods and classes back without a problem. I do understand that in real life for a bank app for example, such as this one, we would be needing more private classes though. I hope to be able to see more about in class and practice this more so my knowledge will be higher on this subject.

I intended to keep my first menu very clean, just giving the two options for the user to pick Employee or Customer. I also made sure to ask the user to try again if anything else apart from 1 or 2 is typed.

Inside the Employee I added 5 options: to create a new account, to delete an account, to lodge, to withdraw and to show the customer list. One of my struggles here was that I was hoping to be able to get back to an specific option of the menu, for example. However, as the employee requires a password to enter the menu I wasn`t able to do that. I`ve done some research on that but got a bit frustrated and I decided to just to go back to the BankMenu.java class, which brings us back to the initial menu we see when the program runs. In my opinion, that worked out pretty well as it keeps the program running until the user decides to stop it.

For creating the text files I found it very confusing as that was something we never really got to do any connection between the code and a text file before, but I believe that with a little bit more class exercises and I would be able to do it without a problem. I found this method very straight forward, by using the FileWriter to select and open the file and the BufferedWriter to enable the computer to write the new values on the document. I tried to make the text on the files simple but organized, with all the information needed. I struggled with the variables names but once I got that sorted it was everything fine.

In the Customer I added 2 options: Lodge and Withdraw. As I started with the Employee, I found it quite simple to finish my Customer as most of the code was pretty much done. I only wish I had more time to finish this menu properly.

I was first decided to create different classes for all the transactions but the more I was working on my program I had many issues regarding to connecting the values from one class to another so I decided to create the Transactions class that would include the Withdraw, Lodge and Delete methods. Although, the Delete method would only be possible to be accessed by the bank employee. I believe that saved me up some time and also made the code a bit more clear than it was before when I was keeping them separated.

The reason I created the ImplementData class was to be able to use an array to get every character of the first and last name of the person (typed by the employee) so I could get the first letter from each name and it`s alphabet position to generate the account number and pin. I always struggle when creating arrays which is why I somewhat enjoyed this exercise as it gave me the opportunity to practice this more as I know that I need to.


Conclusion

It was very interesting and rewarding to being able to build something that we actually experience daily but never got to see it from behind, how it actually works. As I have mentioned, my biggest struggle within this project was to understand how the files could be created but how to also keep the values secured and saved into a text file. So far in our programming classes we never got to do this before. Which unfortunately, led me to not being able to finish this program in the way I wanted to but I`m also happy with the work I`ve done so far as it helped me to learn so much and practice more, which is what I want. It was a great challenge to me and could even say for the whole class, so I hope to see more exercises like that in class and enjoy this journey of ups and downs which is learning how to program in Java. 
